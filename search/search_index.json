{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Statworx Theme A color theme plugin for the matplotlib library and all its derivatives, which automatically applies the official statworx color theme. This package also registers commonly used qualitative color maps (such as a fade from good to bad) for use in presentations. Quick Start Simply install a module with pip by using the following command. pip install statworx-theme To apply the style, you must call the apply_style function by typing: from statworx_theme import apply_style apply_style () Gallery There is an extensive gallery of figures that use the Statworx theme that you can draw inspiration from. You can find it here . Custom Colors You can also use a custom list of color for the color scheme beside the official statworx colors. There is a convenience function for that which is described below. This simply changes the colors. In case you want to change the entire style you should implement your own .mplstyle file (see this ). from statworx_theme import apply_custom_colors custom_colors = [ DARK_BLUE := \"#0A526B\" , DARK_RED := \"#6B0020\" , GREY := \"#808285\" , ] apply_custom_colors ( custom_colors )","title":"Overview"},{"location":"index.html#statworx-theme","text":"A color theme plugin for the matplotlib library and all its derivatives, which automatically applies the official statworx color theme. This package also registers commonly used qualitative color maps (such as a fade from good to bad) for use in presentations.","title":"Statworx Theme"},{"location":"index.html#quick-start","text":"Simply install a module with pip by using the following command. pip install statworx-theme To apply the style, you must call the apply_style function by typing: from statworx_theme import apply_style apply_style ()","title":"Quick Start"},{"location":"index.html#gallery","text":"There is an extensive gallery of figures that use the Statworx theme that you can draw inspiration from. You can find it here .","title":"Gallery"},{"location":"index.html#custom-colors","text":"You can also use a custom list of color for the color scheme beside the official statworx colors. There is a convenience function for that which is described below. This simply changes the colors. In case you want to change the entire style you should implement your own .mplstyle file (see this ). from statworx_theme import apply_custom_colors custom_colors = [ DARK_BLUE := \"#0A526B\" , DARK_RED := \"#6B0020\" , GREY := \"#808285\" , ] apply_custom_colors ( custom_colors )","title":"Custom Colors"},{"location":"changelog.html","text":"0.9.0 (2022-06-27) Merge branch 'dev' [ORG:DOCS] Update README.md [NBK:ENH] Update example notebooks [OPS:ENH] Update function names [ORG:FEAT] Add option to add custom client colors [DEP:DEL] Remove matplotlibx as a dependency [NBK:DOCS] Format text in notebooks Merge remote-tracking branch 'origin/master' into dev [NBK:ENH] Update example usage notebook [ORG:ENH] Add matplotx timeseries example 0.8.0 (2022-06-21) [ORG:ENH] Add statworx as package maintainer 0.7.0 (2022-06-20) Merge branch 'dev' [OPS:DOCS] Update docs [ORG:ENH] Make private functions hidden [ORG:DOCS] Update code section in mkdocs [OPS:ENH] Update README.md [ORG:DOCS] Remove changelog and licence page from mkdocs [DEP:ENH] Update Dependencies [ORG:ENH] Rename author to STATWORX 0.6.1 (2022-05-31) Merge pull request #7 from AnHo4ng/dev Update [DEP:FIX] Make python version more permissible [ORG:FIX] Fix inconsitency in documentation 0.6.0 (2022-04-29) Merge pull request #6 from AnHo4ng/dev Fix [ORG:DOCS] Use markdown syntax in README to include images [ORG:ENH] Use README as index.md in mkdocs [ORG:ENH] Update sample plot for README 0.5.0 (2022-04-29) Merge pull request #5 from AnHo4ng/dev Update Color Scheme [NBK:ENH] Update Example Notebooks [ORG:ENH] Update pyproject.toml with url to documentation [ORG:DOCS] Update examples in README [ORG:DOCS] Update documentation for new color schema [ORG:ENH] Add official statworx theme [ORG:STYLE] Update matplotlib style config 0.4.5 (2022-04-24) Merge branch 'dev' [ORG:FIX] Make plots smaller [ORG:FIX] Update lock file 0.4.4 (2022-04-24) [CI:FIX] Streamline readthedocs fix [ORG:FIX] Plot figures as svg by default 0.4.3 (2022-04-24) Merge branch 'dev' into origin/master [ORG:FIX] Fix docs requirements 0.4.2 (2022-04-24) Merge branch 'dev' [ORG:FIX] Update docs requirements Merge remote-tracking branch 'origin/master' into dev 0.4.1 (2022-04-24) Merge pull request #3 from AnHo4ng/dev Fix [CI:FIX] Fix requirements 0.4.0 (2022-04-24) Merge pull request #2 from AnHo4ng/dev Update [ORG:FIX] Update sample image [ORG:ENH] Update poetry dependencies [ORG:FIX] Ignore warnings [ORG:FEAT] Change font config in mplstyle [ORG:DOCS] Add changelog to mkdocs 0.3.0 (2022-04-24) Merge pull request #1 from AnHo4ng/dev Update [ORG:FEAT] Update pyproject toml with metadata [ORG:FEAT] Add repo to mkdocs config [ORG:ENH] Add link to gallery in readme [ORG:ENH] Add github badges to README 0.2.2 (2022-04-24) [ORG:FIX] Add apply_style to init 0.2.1 (2022-04-24) [ORG:FIX] Fix errro in pyproject toml 0.2.0 (2022-04-24) [CI:FIX] Fix cz config [MOD:ICM] First Commit","title":"Changelog"},{"location":"changelog.html#090-2022-06-27","text":"Merge branch 'dev' [ORG:DOCS] Update README.md [NBK:ENH] Update example notebooks [OPS:ENH] Update function names [ORG:FEAT] Add option to add custom client colors [DEP:DEL] Remove matplotlibx as a dependency [NBK:DOCS] Format text in notebooks Merge remote-tracking branch 'origin/master' into dev [NBK:ENH] Update example usage notebook [ORG:ENH] Add matplotx timeseries example","title":"0.9.0 (2022-06-27)"},{"location":"changelog.html#080-2022-06-21","text":"[ORG:ENH] Add statworx as package maintainer","title":"0.8.0 (2022-06-21)"},{"location":"changelog.html#070-2022-06-20","text":"Merge branch 'dev' [OPS:DOCS] Update docs [ORG:ENH] Make private functions hidden [ORG:DOCS] Update code section in mkdocs [OPS:ENH] Update README.md [ORG:DOCS] Remove changelog and licence page from mkdocs [DEP:ENH] Update Dependencies [ORG:ENH] Rename author to STATWORX","title":"0.7.0 (2022-06-20)"},{"location":"changelog.html#061-2022-05-31","text":"Merge pull request #7 from AnHo4ng/dev Update [DEP:FIX] Make python version more permissible [ORG:FIX] Fix inconsitency in documentation","title":"0.6.1 (2022-05-31)"},{"location":"changelog.html#060-2022-04-29","text":"Merge pull request #6 from AnHo4ng/dev Fix [ORG:DOCS] Use markdown syntax in README to include images [ORG:ENH] Use README as index.md in mkdocs [ORG:ENH] Update sample plot for README","title":"0.6.0 (2022-04-29)"},{"location":"changelog.html#050-2022-04-29","text":"Merge pull request #5 from AnHo4ng/dev Update Color Scheme [NBK:ENH] Update Example Notebooks [ORG:ENH] Update pyproject.toml with url to documentation [ORG:DOCS] Update examples in README [ORG:DOCS] Update documentation for new color schema [ORG:ENH] Add official statworx theme [ORG:STYLE] Update matplotlib style config","title":"0.5.0 (2022-04-29)"},{"location":"changelog.html#045-2022-04-24","text":"Merge branch 'dev' [ORG:FIX] Make plots smaller [ORG:FIX] Update lock file","title":"0.4.5 (2022-04-24)"},{"location":"changelog.html#044-2022-04-24","text":"[CI:FIX] Streamline readthedocs fix [ORG:FIX] Plot figures as svg by default","title":"0.4.4 (2022-04-24)"},{"location":"changelog.html#043-2022-04-24","text":"Merge branch 'dev' into origin/master [ORG:FIX] Fix docs requirements","title":"0.4.3 (2022-04-24)"},{"location":"changelog.html#042-2022-04-24","text":"Merge branch 'dev' [ORG:FIX] Update docs requirements Merge remote-tracking branch 'origin/master' into dev","title":"0.4.2 (2022-04-24)"},{"location":"changelog.html#041-2022-04-24","text":"Merge pull request #3 from AnHo4ng/dev Fix [CI:FIX] Fix requirements","title":"0.4.1 (2022-04-24)"},{"location":"changelog.html#040-2022-04-24","text":"Merge pull request #2 from AnHo4ng/dev Update [ORG:FIX] Update sample image [ORG:ENH] Update poetry dependencies [ORG:FIX] Ignore warnings [ORG:FEAT] Change font config in mplstyle [ORG:DOCS] Add changelog to mkdocs","title":"0.4.0 (2022-04-24)"},{"location":"changelog.html#030-2022-04-24","text":"Merge pull request #1 from AnHo4ng/dev Update [ORG:FEAT] Update pyproject toml with metadata [ORG:FEAT] Add repo to mkdocs config [ORG:ENH] Add link to gallery in readme [ORG:ENH] Add github badges to README","title":"0.3.0 (2022-04-24)"},{"location":"changelog.html#022-2022-04-24","text":"[ORG:FIX] Add apply_style to init","title":"0.2.2 (2022-04-24)"},{"location":"changelog.html#021-2022-04-24","text":"[ORG:FIX] Fix errro in pyproject toml","title":"0.2.1 (2022-04-24)"},{"location":"changelog.html#020-2022-04-24","text":"[CI:FIX] Fix cz config [MOD:ICM] First Commit","title":"0.2.0 (2022-04-24)"},{"location":"code.html","text":"Code Documentation statworx_theme.utils _install_styles () Install matplotlib style files with suffix .mplstyle to the matplotlib config dir. Source code in statworx_theme/utils.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def _install_styles () -> None : \"\"\"Install matplotlib style files with suffix `.mplstyle` to the matplotlib config dir.\"\"\" # list all theme files config_path = join ( dirname ( statworx_theme . __file__ ), \"styles\" ) theme_files = [ join ( config_path , f ) for f in os . listdir ( config_path )] # get config directory config_dir = mpl . get_configdir () style_dir = join ( config_dir , \"stylelib\" ) os . makedirs ( style_dir , exist_ok = True ) # copy theme files into config directory for file in theme_files : copy ( file , style_dir ) # reload matplotlib reload_library () apply_custom_colors ( colors , cmap_name = 'stwx:custom' , ** kwargs ) Apply custom custom colors to statworx style. Parameters: Name Type Description Default colors List [ str ] List of custom colors as hex codes required cmap_name str Custom name of new colormap. Defaults to \"stwx:custom\". 'stwx:custom' **kwargs Any Addition parameters that are passed to the style config {} Source code in statworx_theme/utils.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 def apply_custom_colors ( colors : List [ str ], cmap_name : str = \"stwx:custom\" , ** kwargs : Any ) -> None : \"\"\"Apply custom custom colors to statworx style. Args: colors: List of custom colors as hex codes cmap_name: Custom name of new colormap. Defaults to \"stwx:custom\". **kwargs: Addition parameters that are passed to the style config \"\"\" # apply statworx style apply_style () # add colors as a custom cmap register_listed_cmap ( colors , cmap_name ) # add colors to current style color_list = [{ \"color\" : c } for c in colors ] mpl . rcParams [ \"axes.prop_cycle\" ] = Cycler ( color_list ) # apply kwargs mpl . rcParams . update ( kwargs ) apply_style () Apply the statworx color style. Source code in statworx_theme/utils.py 76 77 78 79 def apply_style () -> None : \"\"\"Apply the statworx color style.\"\"\" _install_styles () plt . style . use ( \"statworx\" ) register_blended_cmap ( colors , name ) Register a blended colormap to matplotlib. Parameters: Name Type Description Default colors List [ str ] Colors of the colormap required name str Name of the colormap required Returns: Type Description LinearSegmentedColormap Registered Colormap Source code in statworx_theme/utils.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def register_blended_cmap ( colors : List [ str ], name : str ) -> LinearSegmentedColormap : \"\"\"Register a blended colormap to matplotlib. Args: colors: Colors of the colormap name: Name of the colormap Returns: Registered Colormap \"\"\" cmap = LinearSegmentedColormap . from_list ( name , colors ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) plt . register_cmap ( name , cmap ) return cmap register_listed_cmap ( colors , name ) Register a listed colormat in matplotlib. Parameters: Name Type Description Default colors List [ str ] Color of the colormap required name str Name of the colormap required Returns: Type Description ListedColormap Registered Colormap Source code in statworx_theme/utils.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def register_listed_cmap ( colors : List [ str ], name : str ) -> ListedColormap : \"\"\"Register a listed colormat in matplotlib. Args: colors: Color of the colormap name: Name of the colormap Returns: Registered Colormap \"\"\" # register color map cmap = ListedColormap ( colors , N = len ( colors ), name = name ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) plt . register_cmap ( name , cmap ) # dark magic shit MPL_QUAL_PALS . update ({ name : len ( colors )}) return cmap statworx_theme.colormaps statworx_theme.colors","title":"Code Documentation"},{"location":"code.html#code-documentation","text":"","title":"Code Documentation"},{"location":"code.html#statworx_theme.utils","text":"","title":"utils"},{"location":"code.html#statworx_theme.utils._install_styles","text":"Install matplotlib style files with suffix .mplstyle to the matplotlib config dir. Source code in statworx_theme/utils.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def _install_styles () -> None : \"\"\"Install matplotlib style files with suffix `.mplstyle` to the matplotlib config dir.\"\"\" # list all theme files config_path = join ( dirname ( statworx_theme . __file__ ), \"styles\" ) theme_files = [ join ( config_path , f ) for f in os . listdir ( config_path )] # get config directory config_dir = mpl . get_configdir () style_dir = join ( config_dir , \"stylelib\" ) os . makedirs ( style_dir , exist_ok = True ) # copy theme files into config directory for file in theme_files : copy ( file , style_dir ) # reload matplotlib reload_library ()","title":"_install_styles()"},{"location":"code.html#statworx_theme.utils.apply_custom_colors","text":"Apply custom custom colors to statworx style. Parameters: Name Type Description Default colors List [ str ] List of custom colors as hex codes required cmap_name str Custom name of new colormap. Defaults to \"stwx:custom\". 'stwx:custom' **kwargs Any Addition parameters that are passed to the style config {} Source code in statworx_theme/utils.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 def apply_custom_colors ( colors : List [ str ], cmap_name : str = \"stwx:custom\" , ** kwargs : Any ) -> None : \"\"\"Apply custom custom colors to statworx style. Args: colors: List of custom colors as hex codes cmap_name: Custom name of new colormap. Defaults to \"stwx:custom\". **kwargs: Addition parameters that are passed to the style config \"\"\" # apply statworx style apply_style () # add colors as a custom cmap register_listed_cmap ( colors , cmap_name ) # add colors to current style color_list = [{ \"color\" : c } for c in colors ] mpl . rcParams [ \"axes.prop_cycle\" ] = Cycler ( color_list ) # apply kwargs mpl . rcParams . update ( kwargs )","title":"apply_custom_colors()"},{"location":"code.html#statworx_theme.utils.apply_style","text":"Apply the statworx color style. Source code in statworx_theme/utils.py 76 77 78 79 def apply_style () -> None : \"\"\"Apply the statworx color style.\"\"\" _install_styles () plt . style . use ( \"statworx\" )","title":"apply_style()"},{"location":"code.html#statworx_theme.utils.register_blended_cmap","text":"Register a blended colormap to matplotlib. Parameters: Name Type Description Default colors List [ str ] Colors of the colormap required name str Name of the colormap required Returns: Type Description LinearSegmentedColormap Registered Colormap Source code in statworx_theme/utils.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def register_blended_cmap ( colors : List [ str ], name : str ) -> LinearSegmentedColormap : \"\"\"Register a blended colormap to matplotlib. Args: colors: Colors of the colormap name: Name of the colormap Returns: Registered Colormap \"\"\" cmap = LinearSegmentedColormap . from_list ( name , colors ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) plt . register_cmap ( name , cmap ) return cmap","title":"register_blended_cmap()"},{"location":"code.html#statworx_theme.utils.register_listed_cmap","text":"Register a listed colormat in matplotlib. Parameters: Name Type Description Default colors List [ str ] Color of the colormap required name str Name of the colormap required Returns: Type Description ListedColormap Registered Colormap Source code in statworx_theme/utils.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def register_listed_cmap ( colors : List [ str ], name : str ) -> ListedColormap : \"\"\"Register a listed colormat in matplotlib. Args: colors: Color of the colormap name: Name of the colormap Returns: Registered Colormap \"\"\" # register color map cmap = ListedColormap ( colors , N = len ( colors ), name = name ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) plt . register_cmap ( name , cmap ) # dark magic shit MPL_QUAL_PALS . update ({ name : len ( colors )}) return cmap","title":"register_listed_cmap()"},{"location":"code.html#statworx_theme.colormaps","text":"","title":"colormaps"},{"location":"code.html#statworx_theme.colors","text":"","title":"colors"},{"location":"colormap.html","text":"Colormaps Import Colormaps To import the statworx theme colormaps to a matplotlib, simply run the apply_style functions as shown below. Now you can call these colormaps by their name like their native counterparts . Note that the name of all statworx colormaps start with stwx: . # mkdocs: render from statworx_theme import apply_style apply_style () List of Available Colormaps Discrete Maps # mkdocs: render plot_color_gradients ( 'Discrete Statworx Themes' , [ 'stwx:standard' , 'stwx:alternative' , 'stwx:deep' ]) Continous Maps Qualitative Fading Blending Diverging Rising # mkdocs: render plot_color_gradients ( 'Qualitative Statworx Themes' , [ 'stwx:good2bad' , 'stwx:bad2good' ]) # mkdocs: render plot_color_gradients ( \"Fading Statworx Themes\" , [ f \"stwx: { c } _fade\" for c in [ \"Bl\" , \"Rd\" , \"Gn\" , \"Yw\" ]] ) # mkdocs: render from itertools import product color_names = [ \"Bl\" , \"Rd\" , \"Gn\" , \"Yw\" ] plot_color_gradients ( \"Blending Statworx Themes\" , [ f \"stwx: { c1 }{ c2 } _blend\" for ( c1 , c2 ) in product ( color_names , color_names ) if c1 != c2 ], ) # mkdocs: render from itertools import product color_names = [ \"Bl\" , \"Rd\" , \"Gn\" , \"Yw\" ] plot_color_gradients ( \"Diverging Statworx Themes\" , [ f \"stwx: { c1 }{ c2 } _diverging\" for ( c1 , c2 ) in product ( color_names , color_names )], ) # mkdocs: render from itertools import product color_names = [ \"Bl\" , \"Rd\" , \"Gn\" , \"Yw\" ] plot_color_gradients ( \"Rising Statworx Themes\" , [ f \"stwx: { c } _rise\" for c in color_names ], ) Usage stwx:good2bad stwx:Bl_fade stwx:Rd_rise # mkdocs: render import seaborn as sns import matplotlib.pyplot as plt # Load the example flights dataset and convert to long-form flights_long = sns . load_dataset ( \"flights\" ) flights = flights_long . pivot ( \"month\" , \"year\" , \"passengers\" ) # Draw a heatmap with the numeric values in each cell f , ax = plt . subplots ( figsize = ( 9 , 6 )) sns . heatmap ( flights , annot = True , fmt = \"d\" , linewidths = .5 , ax = ax , cmap = \"stwx:good2bad\" ) # mkdocs: render import seaborn as sns import matplotlib.pyplot as plt # Load the example flights dataset and convert to long-form flights_long = sns . load_dataset ( \"flights\" ) flights = flights_long . pivot ( \"month\" , \"year\" , \"passengers\" ) # Draw a heatmap with the numeric values in each cell f , ax = plt . subplots ( figsize = ( 9 , 6 )) sns . heatmap ( flights , annot = True , fmt = \"d\" , linewidths = .5 , ax = ax , cmap = \"stwx:Bl_fade\" ) # mkdocs: render import seaborn as sns import matplotlib.pyplot as plt # Load the example flights dataset and convert to long-form flights_long = sns . load_dataset ( \"flights\" ) flights = flights_long . pivot ( \"month\" , \"year\" , \"passengers\" ) # Draw a heatmap with the numeric values in each cell f , ax = plt . subplots ( figsize = ( 9 , 6 )) sns . heatmap ( flights , annot = True , fmt = \"d\" , linewidths = .5 , ax = ax , cmap = \"stwx:Rd_rise\" )","title":"Colormaps"},{"location":"colormap.html#colormaps","text":"","title":"Colormaps"},{"location":"colormap.html#import-colormaps","text":"To import the statworx theme colormaps to a matplotlib, simply run the apply_style functions as shown below. Now you can call these colormaps by their name like their native counterparts . Note that the name of all statworx colormaps start with stwx: . # mkdocs: render from statworx_theme import apply_style apply_style ()","title":"Import Colormaps"},{"location":"colormap.html#list-of-available-colormaps","text":"","title":"List of Available Colormaps"},{"location":"colormap.html#discrete-maps","text":"# mkdocs: render plot_color_gradients ( 'Discrete Statworx Themes' , [ 'stwx:standard' , 'stwx:alternative' , 'stwx:deep' ])","title":"Discrete Maps"},{"location":"colormap.html#continous-maps","text":"Qualitative Fading Blending Diverging Rising # mkdocs: render plot_color_gradients ( 'Qualitative Statworx Themes' , [ 'stwx:good2bad' , 'stwx:bad2good' ]) # mkdocs: render plot_color_gradients ( \"Fading Statworx Themes\" , [ f \"stwx: { c } _fade\" for c in [ \"Bl\" , \"Rd\" , \"Gn\" , \"Yw\" ]] ) # mkdocs: render from itertools import product color_names = [ \"Bl\" , \"Rd\" , \"Gn\" , \"Yw\" ] plot_color_gradients ( \"Blending Statworx Themes\" , [ f \"stwx: { c1 }{ c2 } _blend\" for ( c1 , c2 ) in product ( color_names , color_names ) if c1 != c2 ], ) # mkdocs: render from itertools import product color_names = [ \"Bl\" , \"Rd\" , \"Gn\" , \"Yw\" ] plot_color_gradients ( \"Diverging Statworx Themes\" , [ f \"stwx: { c1 }{ c2 } _diverging\" for ( c1 , c2 ) in product ( color_names , color_names )], ) # mkdocs: render from itertools import product color_names = [ \"Bl\" , \"Rd\" , \"Gn\" , \"Yw\" ] plot_color_gradients ( \"Rising Statworx Themes\" , [ f \"stwx: { c } _rise\" for c in color_names ], )","title":"Continous Maps"},{"location":"colormap.html#usage","text":"stwx:good2bad stwx:Bl_fade stwx:Rd_rise # mkdocs: render import seaborn as sns import matplotlib.pyplot as plt # Load the example flights dataset and convert to long-form flights_long = sns . load_dataset ( \"flights\" ) flights = flights_long . pivot ( \"month\" , \"year\" , \"passengers\" ) # Draw a heatmap with the numeric values in each cell f , ax = plt . subplots ( figsize = ( 9 , 6 )) sns . heatmap ( flights , annot = True , fmt = \"d\" , linewidths = .5 , ax = ax , cmap = \"stwx:good2bad\" ) # mkdocs: render import seaborn as sns import matplotlib.pyplot as plt # Load the example flights dataset and convert to long-form flights_long = sns . load_dataset ( \"flights\" ) flights = flights_long . pivot ( \"month\" , \"year\" , \"passengers\" ) # Draw a heatmap with the numeric values in each cell f , ax = plt . subplots ( figsize = ( 9 , 6 )) sns . heatmap ( flights , annot = True , fmt = \"d\" , linewidths = .5 , ax = ax , cmap = \"stwx:Bl_fade\" ) # mkdocs: render import seaborn as sns import matplotlib.pyplot as plt # Load the example flights dataset and convert to long-form flights_long = sns . load_dataset ( \"flights\" ) flights = flights_long . pivot ( \"month\" , \"year\" , \"passengers\" ) # Draw a heatmap with the numeric values in each cell f , ax = plt . subplots ( figsize = ( 9 , 6 )) sns . heatmap ( flights , annot = True , fmt = \"d\" , linewidths = .5 , ax = ax , cmap = \"stwx:Rd_rise\" )","title":"Usage"},{"location":"contribution.html","text":"Contribution Guide","title":"Contribution Guide"},{"location":"contribution.html#contribution-guide","text":"","title":"Contribution Guide"},{"location":"gallery.html","text":"Gallery The gallery should help you to see the themes and colors applied in different plots. This template can also serve as an inspiration to get an idea of which graphics might be suitable for your case. Note that this template should not be considered as a 1 to 1 guideline but rather as a tool which helps statworx to create a more coherent picture when visualizing data. Apply Style To apply the statworx theme to a matplotlib plot, simply run the apply_style functions as shown below. All subsequently generated plots will have the statworx colors. # mkdocs: render from statworx_theme import apply_style apply_style () Distribution Density Chart Stacked Distribution Chart Violin Plot Histogram # mkdocs: render import seaborn as sns tips = sns . load_dataset ( \"tips\" ) sns . kdeplot ( data = tips , x = \"total_bill\" , hue = \"time\" , fill = True , common_norm = False ) # mkdocs: render import seaborn as sns # Load the diamonds dataset diamonds = sns . load_dataset ( \"diamonds\" ) # Plot the distribution of clarity ratings, conditional on carat sns . displot ( data = diamonds , x = \"carat\" , hue = \"cut\" , kind = \"kde\" , multiple = \"fill\" , clip = ( 0 , None ), palette = \"stwx:Bl_fade\" , ) # mkdocs: render import seaborn as sns # Load the example tips dataset tips = sns . load_dataset ( \"tips\" ) # Draw a nested violinplot and split the violins for easier comparison sns . violinplot ( data = tips , x = \"day\" , y = \"total_bill\" , hue = \"smoker\" , split = True , inner = \"quart\" , ) sns . despine ( left = True ) Hint When making a histogram, always explore multiple bin widths. In addition, avoid overlapping histograms as they can be confused with stacked bar charts. # mkdocs: render import seaborn as sns diamonds = sns . load_dataset ( \"diamonds\" ) sns . histplot ( diamonds , x = \"price\" , hue = \"cut\" , multiple = \"stack\" , log_scale = True , ) Timeseries Line Plot Interval Line Plot # mkdocs: render import numpy as np import pandas as pd import seaborn as sns rs = np . random . RandomState ( 365 ) values = rs . randn ( 365 , 4 ) . cumsum ( axis = 0 ) dates = pd . date_range ( \"1 1 2016\" , periods = 365 , freq = \"D\" ) data = pd . DataFrame ( values , dates , columns = [ \"A\" , \"B\" , \"C\" , \"D\" ]) data = data . rolling ( 7 ) . mean () sns . lineplot ( data = data , linewidth = 2.5 ) # mkdocs: render import seaborn as sns # Load an example dataset with long-form data fmri = sns . load_dataset ( \"fmri\" ) # Plot the responses for different events and regions sns . lineplot ( x = \"timepoint\" , y = \"signal\" , hue = \"region\" , style = \"event\" , data = fmri ) Relationship Regression Plot Bubble Chart Joint Density Scatter Plot Pair Plot Correlation Plot # mkdocs: render import seaborn as sns # Load the penguins dataset penguins = sns . load_dataset ( \"penguins\" ) # Plot sepal width as a function of sepal_length across days g = sns . lmplot ( data = penguins , x = \"bill_length_mm\" , y = \"bill_depth_mm\" , hue = \"species\" , height = 5 ) # Use more informative axis labels than are provided by default g . set_axis_labels ( \"Snoot length (mm)\" , \"Snoot depth (mm)\" ) plt . title ( \"Lorem Ipsum Dolor Sit Amet\" ) # mkdocs: render import seaborn as sns # Load the example mpg dataset mpg = sns . load_dataset ( \"mpg\" ) # Plot miles per gallon against horsepower with other semantics sns . relplot ( x = \"horsepower\" , y = \"mpg\" , hue = \"origin\" , size = \"weight\" , sizes = ( 40 , 400 ), alpha = .5 , palette = \"stwx:alternative\" , height = 6 , data = mpg ) # mkdocs: render import seaborn as sns # Load the penguins dataset penguins = sns . load_dataset ( \"penguins\" ) # Show the joint distribution using kernel density estimation g = sns . jointplot ( data = penguins , x = \"bill_length_mm\" , y = \"bill_depth_mm\" , hue = \"species\" , kind = \"kde\" , ) # mkdocs: render import seaborn as sns mpg = sns . load_dataset ( \"mpg\" ) # Use JointGrid directly to draw a custom plot g = sns . JointGrid ( data = mpg , x = \"mpg\" , y = \"acceleration\" , space = 0 , ratio = 17 ) g . plot_joint ( sns . scatterplot , legend = False ) g . plot_marginals ( sns . rugplot , height = 1 ) # mkdocs: render import seaborn as sns df = sns . load_dataset ( \"penguins\" ) sns . pairplot ( df , hue = \"species\" ) # mkdocs: render from string import ascii_letters import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Generate a large random dataset rs = np . random . RandomState ( 33 ) d = pd . DataFrame ( data = rs . normal ( size = ( 100 , 10 )), columns = list ( ascii_letters [ 26 : 26 + 10 ])) # Compute the correlation matrix corr = d . corr () # Generate a mask for the upper triangle mask = np . triu ( np . ones_like ( corr , dtype = bool )) # Draw the heatmap with the mask and correct aspect ratio sns . heatmap ( corr , mask = mask , cmap = \"stwx:Bl_fade\" , vmax = .3 , center = 0 , square = True , linewidths = .5 , cbar_kws = { \"shrink\" : .5 }) Comparison Bar Plot Stacked Bar Plot Boxplot Boxen Plot Swarm Plot Hint One should only rearrange bars, when there is no natural ordering to the categories. Whenever there is a natural ordering (i.e. when our categorical variable is an ordered factor) one should keep the original ordering in the visualization. When bars are of similar length it is visually less appealing to use bar plots (\u201cMoire effect\u201d). In this case, one can resort to use Lollipop charts. # mkdocs: render import seaborn as sns penguins = sns . load_dataset ( \"penguins\" ) # Draw a nested barplot by species and sex g = sns . catplot ( data = penguins , kind = \"bar\" , x = \"species\" , y = \"body_mass_g\" , hue = \"sex\" , ci = None ) g . despine ( left = True ) g . set_axis_labels ( \"\" , \"Body mass (g)\" ) g . legend . set_title ( \"\" ) # mkdocs: render import seaborn as sns import matplotlib.pyplot as plt from statworx_theme.colors import BLUE , LIGHT_BLUE # Initialize the matplotlib figure f , ax = plt . subplots ( figsize = ( 6 , 15 )) # Load the example car crash dataset crashes = sns . load_dataset ( \"car_crashes\" ) . sort_values ( \"total\" , ascending = False ) # Plot the total crashes sns . set_color_codes ( \"pastel\" ) sns . barplot ( x = \"total\" , y = \"abbrev\" , data = crashes , label = \"Total\" , color = LIGHT_BLUE ) # Plot the crashes where alcohol was involved sns . set_color_codes ( \"muted\" ) sns . barplot ( x = \"alcohol\" , y = \"abbrev\" , data = crashes , label = \"Alcohol-involved\" , color = BLUE ) # Add a legend and informative axis label ax . legend ( ncol = 2 , loc = \"lower right\" , frameon = True ) ax . set ( xlim = ( 0 , 24 ), ylabel = \"\" , xlabel = \"Automobile collisions per billion miles\" ) sns . despine ( left = True , bottom = True ) Hint Adding jittered points to a box plot is useful to see the underlying distribution of the data. # mkdocs: render import seaborn as sns # Load the example tips dataset tips = sns . load_dataset ( \"tips\" ) # Draw a nested boxplot to show bills by day and time sns . boxplot ( x = \"day\" , y = \"total_bill\" , hue = \"smoker\" , data = tips ) sns . despine ( offset = 10 , trim = True ) # mkdocs: render import seaborn as sns diamonds = sns . load_dataset ( \"diamonds\" ) clarity_ranking = [ \"I1\" , \"SI2\" , \"SI1\" , \"VS2\" , \"VS1\" , \"VVS2\" , \"VVS1\" , \"IF\" ] sns . boxenplot ( x = \"clarity\" , y = \"carat\" , color = BLUE , order = clarity_ranking , scale = \"linear\" , data = diamonds ) # mkdocs: render import seaborn as sns # Load the penguins dataset df = sns . load_dataset ( \"penguins\" ) # Draw a categorical scatterplot to show each observation ax = sns . swarmplot ( data = df , x = \"body_mass_g\" , y = \"sex\" , hue = \"species\" ) ax . set ( ylabel = \"\" )","title":"Gallery"},{"location":"gallery.html#gallery","text":"The gallery should help you to see the themes and colors applied in different plots. This template can also serve as an inspiration to get an idea of which graphics might be suitable for your case. Note that this template should not be considered as a 1 to 1 guideline but rather as a tool which helps statworx to create a more coherent picture when visualizing data.","title":"Gallery"},{"location":"gallery.html#apply-style","text":"To apply the statworx theme to a matplotlib plot, simply run the apply_style functions as shown below. All subsequently generated plots will have the statworx colors. # mkdocs: render from statworx_theme import apply_style apply_style ()","title":"Apply Style"},{"location":"gallery.html#distribution","text":"Density Chart Stacked Distribution Chart Violin Plot Histogram # mkdocs: render import seaborn as sns tips = sns . load_dataset ( \"tips\" ) sns . kdeplot ( data = tips , x = \"total_bill\" , hue = \"time\" , fill = True , common_norm = False ) # mkdocs: render import seaborn as sns # Load the diamonds dataset diamonds = sns . load_dataset ( \"diamonds\" ) # Plot the distribution of clarity ratings, conditional on carat sns . displot ( data = diamonds , x = \"carat\" , hue = \"cut\" , kind = \"kde\" , multiple = \"fill\" , clip = ( 0 , None ), palette = \"stwx:Bl_fade\" , ) # mkdocs: render import seaborn as sns # Load the example tips dataset tips = sns . load_dataset ( \"tips\" ) # Draw a nested violinplot and split the violins for easier comparison sns . violinplot ( data = tips , x = \"day\" , y = \"total_bill\" , hue = \"smoker\" , split = True , inner = \"quart\" , ) sns . despine ( left = True ) Hint When making a histogram, always explore multiple bin widths. In addition, avoid overlapping histograms as they can be confused with stacked bar charts. # mkdocs: render import seaborn as sns diamonds = sns . load_dataset ( \"diamonds\" ) sns . histplot ( diamonds , x = \"price\" , hue = \"cut\" , multiple = \"stack\" , log_scale = True , )","title":"Distribution"},{"location":"gallery.html#timeseries","text":"Line Plot Interval Line Plot # mkdocs: render import numpy as np import pandas as pd import seaborn as sns rs = np . random . RandomState ( 365 ) values = rs . randn ( 365 , 4 ) . cumsum ( axis = 0 ) dates = pd . date_range ( \"1 1 2016\" , periods = 365 , freq = \"D\" ) data = pd . DataFrame ( values , dates , columns = [ \"A\" , \"B\" , \"C\" , \"D\" ]) data = data . rolling ( 7 ) . mean () sns . lineplot ( data = data , linewidth = 2.5 ) # mkdocs: render import seaborn as sns # Load an example dataset with long-form data fmri = sns . load_dataset ( \"fmri\" ) # Plot the responses for different events and regions sns . lineplot ( x = \"timepoint\" , y = \"signal\" , hue = \"region\" , style = \"event\" , data = fmri )","title":"Timeseries"},{"location":"gallery.html#relationship","text":"Regression Plot Bubble Chart Joint Density Scatter Plot Pair Plot Correlation Plot # mkdocs: render import seaborn as sns # Load the penguins dataset penguins = sns . load_dataset ( \"penguins\" ) # Plot sepal width as a function of sepal_length across days g = sns . lmplot ( data = penguins , x = \"bill_length_mm\" , y = \"bill_depth_mm\" , hue = \"species\" , height = 5 ) # Use more informative axis labels than are provided by default g . set_axis_labels ( \"Snoot length (mm)\" , \"Snoot depth (mm)\" ) plt . title ( \"Lorem Ipsum Dolor Sit Amet\" ) # mkdocs: render import seaborn as sns # Load the example mpg dataset mpg = sns . load_dataset ( \"mpg\" ) # Plot miles per gallon against horsepower with other semantics sns . relplot ( x = \"horsepower\" , y = \"mpg\" , hue = \"origin\" , size = \"weight\" , sizes = ( 40 , 400 ), alpha = .5 , palette = \"stwx:alternative\" , height = 6 , data = mpg ) # mkdocs: render import seaborn as sns # Load the penguins dataset penguins = sns . load_dataset ( \"penguins\" ) # Show the joint distribution using kernel density estimation g = sns . jointplot ( data = penguins , x = \"bill_length_mm\" , y = \"bill_depth_mm\" , hue = \"species\" , kind = \"kde\" , ) # mkdocs: render import seaborn as sns mpg = sns . load_dataset ( \"mpg\" ) # Use JointGrid directly to draw a custom plot g = sns . JointGrid ( data = mpg , x = \"mpg\" , y = \"acceleration\" , space = 0 , ratio = 17 ) g . plot_joint ( sns . scatterplot , legend = False ) g . plot_marginals ( sns . rugplot , height = 1 ) # mkdocs: render import seaborn as sns df = sns . load_dataset ( \"penguins\" ) sns . pairplot ( df , hue = \"species\" ) # mkdocs: render from string import ascii_letters import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Generate a large random dataset rs = np . random . RandomState ( 33 ) d = pd . DataFrame ( data = rs . normal ( size = ( 100 , 10 )), columns = list ( ascii_letters [ 26 : 26 + 10 ])) # Compute the correlation matrix corr = d . corr () # Generate a mask for the upper triangle mask = np . triu ( np . ones_like ( corr , dtype = bool )) # Draw the heatmap with the mask and correct aspect ratio sns . heatmap ( corr , mask = mask , cmap = \"stwx:Bl_fade\" , vmax = .3 , center = 0 , square = True , linewidths = .5 , cbar_kws = { \"shrink\" : .5 })","title":"Relationship"},{"location":"gallery.html#comparison","text":"Bar Plot Stacked Bar Plot Boxplot Boxen Plot Swarm Plot Hint One should only rearrange bars, when there is no natural ordering to the categories. Whenever there is a natural ordering (i.e. when our categorical variable is an ordered factor) one should keep the original ordering in the visualization. When bars are of similar length it is visually less appealing to use bar plots (\u201cMoire effect\u201d). In this case, one can resort to use Lollipop charts. # mkdocs: render import seaborn as sns penguins = sns . load_dataset ( \"penguins\" ) # Draw a nested barplot by species and sex g = sns . catplot ( data = penguins , kind = \"bar\" , x = \"species\" , y = \"body_mass_g\" , hue = \"sex\" , ci = None ) g . despine ( left = True ) g . set_axis_labels ( \"\" , \"Body mass (g)\" ) g . legend . set_title ( \"\" ) # mkdocs: render import seaborn as sns import matplotlib.pyplot as plt from statworx_theme.colors import BLUE , LIGHT_BLUE # Initialize the matplotlib figure f , ax = plt . subplots ( figsize = ( 6 , 15 )) # Load the example car crash dataset crashes = sns . load_dataset ( \"car_crashes\" ) . sort_values ( \"total\" , ascending = False ) # Plot the total crashes sns . set_color_codes ( \"pastel\" ) sns . barplot ( x = \"total\" , y = \"abbrev\" , data = crashes , label = \"Total\" , color = LIGHT_BLUE ) # Plot the crashes where alcohol was involved sns . set_color_codes ( \"muted\" ) sns . barplot ( x = \"alcohol\" , y = \"abbrev\" , data = crashes , label = \"Alcohol-involved\" , color = BLUE ) # Add a legend and informative axis label ax . legend ( ncol = 2 , loc = \"lower right\" , frameon = True ) ax . set ( xlim = ( 0 , 24 ), ylabel = \"\" , xlabel = \"Automobile collisions per billion miles\" ) sns . despine ( left = True , bottom = True ) Hint Adding jittered points to a box plot is useful to see the underlying distribution of the data. # mkdocs: render import seaborn as sns # Load the example tips dataset tips = sns . load_dataset ( \"tips\" ) # Draw a nested boxplot to show bills by day and time sns . boxplot ( x = \"day\" , y = \"total_bill\" , hue = \"smoker\" , data = tips ) sns . despine ( offset = 10 , trim = True ) # mkdocs: render import seaborn as sns diamonds = sns . load_dataset ( \"diamonds\" ) clarity_ranking = [ \"I1\" , \"SI2\" , \"SI1\" , \"VS2\" , \"VS1\" , \"VVS2\" , \"VVS1\" , \"IF\" ] sns . boxenplot ( x = \"clarity\" , y = \"carat\" , color = BLUE , order = clarity_ranking , scale = \"linear\" , data = diamonds ) # mkdocs: render import seaborn as sns # Load the penguins dataset df = sns . load_dataset ( \"penguins\" ) # Draw a categorical scatterplot to show each observation ax = sns . swarmplot ( data = df , x = \"body_mass_g\" , y = \"sex\" , hue = \"species\" ) ax . set ( ylabel = \"\" )","title":"Comparison"},{"location":"license.html","text":"MIT License Copyright (c) 2022 An Hoang Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}